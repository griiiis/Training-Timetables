// <auto-generated />
using System;
using App.DAL.EF;
using Base.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.DAL.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("ContestName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ContestTypeId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContestTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("App.Domain.ContestGameType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("ContestGameTypes");
                });

            modelBuilder.Entity("App.Domain.ContestLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("LevelId");

                    b.ToTable("ContestLevels");
                });

            modelBuilder.Entity("App.Domain.ContestPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PackageGameTypeTimeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("PackageGameTypeTimeId");

                    b.ToTable("ContestPackages");
                });

            modelBuilder.Entity("App.Domain.ContestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContestRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestRoles");
                });

            modelBuilder.Entity("App.Domain.ContestTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("TimeId");

                    b.ToTable("ContestTimes");
                });

            modelBuilder.Entity("App.Domain.ContestTimeOfDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeOfDayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("ContestTimeOfDay");
                });

            modelBuilder.Entity("App.Domain.ContestType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("ContestTypeName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LangStr>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("ContestTypes");
                });

            modelBuilder.Entity("App.Domain.ContestUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContestRoleId");

                    b.ToTable("ContestUserRoles");
                });

            modelBuilder.Entity("App.Domain.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("CourtName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("App.Domain.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("CourtId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("LevelId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("App.Domain.GameType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("GameTypeName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PreviousExpirationDT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviousRefreshToken")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LangStr>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("App.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("Country")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LangStr>("LocationName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LangStr>("State")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("App.Domain.PackageGameTypeTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("PackageGtName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Times")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("PackageGameTypeTimes");
                });

            modelBuilder.Entity("App.Domain.RolePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("GamesTrainedHourly")
                        .HasColumnType("integer");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContestId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("LevelId");

                    b.ToTable("RolePreferences");
                });

            modelBuilder.Entity("App.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("TeamName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("LevelId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("App.Domain.TeamGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamGames");
                });

            modelBuilder.Entity("App.Domain.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("TimeOfDayId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Until")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("App.Domain.TimeOfDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<LangStr>("TimeOfDayName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("TimeOfDays");
                });

            modelBuilder.Entity("App.Domain.TimeTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeOfDayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("TimeTeams");
                });

            modelBuilder.Entity("App.Domain.UserContestPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("HoursAvailable")
                        .HasColumnType("numeric");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PackageGameTypeTimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContestId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PackageGameTypeTimeId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserContestPackages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Contest", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.ContestType", "ContestType")
                        .WithMany("Contests")
                        .HasForeignKey("ContestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Location", "Location")
                        .WithMany("Contests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ContestType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("App.Domain.ContestGameType", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("ContestGameTypes")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("ContestGameTypes")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("App.Domain.ContestLevel", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("ContestLevels")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Level", "Level")
                        .WithMany("ContestLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("App.Domain.ContestPackage", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("ContestPackages")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.PackageGameTypeTime", "PackageGameTypeTime")
                        .WithMany("ContestPackages")
                        .HasForeignKey("PackageGameTypeTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("PackageGameTypeTime");
                });

            modelBuilder.Entity("App.Domain.ContestRole", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("App.Domain.ContestTime", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("ContestTimes")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Time", "Time")
                        .WithMany("ContestTimes")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("App.Domain.ContestTimeOfDay", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("ContestTimeOfDays")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.TimeOfDay", "TimeOfDay")
                        .WithMany("ContestTimeOfDays")
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("App.Domain.ContestType", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("ContestTypes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.ContestUserRole", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("ContestUserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.ContestRole", "ContestRole")
                        .WithMany("ContestUserRoles")
                        .HasForeignKey("ContestRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ContestRole");
                });

            modelBuilder.Entity("App.Domain.Court", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("Courts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("Courts")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Location", "Location")
                        .WithMany("Courts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("GameType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("App.Domain.Game", b =>
                {
                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("Games")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Court", "Court")
                        .WithMany("Games")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Level", "Level")
                        .WithMany("Games")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Court");

                    b.Navigation("GameType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("App.Domain.GameType", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("GameTypes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRefreshToken", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Identity.AppUserRole", b =>
                {
                    b.HasOne("App.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Level", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("Levels")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Location", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("Locations")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.PackageGameTypeTime", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("PackageGameTypeTimes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("PackageGameTypeTimes")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("App.Domain.RolePreference", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("RolePreferences")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("RolePreferences")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("RolePreferences")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Level", "Level")
                        .WithMany("RolePreferences")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Contest");

                    b.Navigation("GameType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("App.Domain.Team", b =>
                {
                    b.HasOne("App.Domain.GameType", "GameType")
                        .WithMany("Teams")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Level", "Level")
                        .WithMany("Teams")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("App.Domain.TeamGame", b =>
                {
                    b.HasOne("App.Domain.Game", "Game")
                        .WithMany("TeamGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Team", "Team")
                        .WithMany("TeamGames")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.Domain.Time", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("Times")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.TimeOfDay", "TimeOfDay")
                        .WithMany("Times")
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("App.Domain.TimeOfDay", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("TimeOfDays")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.TimeTeam", b =>
                {
                    b.HasOne("App.Domain.Team", "Team")
                        .WithMany("TimeTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.TimeOfDay", "TimeOfDay")
                        .WithMany("TimeTeams")
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("App.Domain.UserContestPackage", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserContestPackages")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Contest", "Contest")
                        .WithMany("UserContestPackages")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.PackageGameTypeTime", "PackageGameTypeTime")
                        .WithMany("UserContestPackages")
                        .HasForeignKey("PackageGameTypeTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Team", "Team")
                        .WithMany("UserContestPackages")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Contest");

                    b.Navigation("Level");

                    b.Navigation("PackageGameTypeTime");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Contest", b =>
                {
                    b.Navigation("ContestGameTypes");

                    b.Navigation("ContestLevels");

                    b.Navigation("ContestPackages");

                    b.Navigation("ContestTimeOfDays");

                    b.Navigation("ContestTimes");

                    b.Navigation("Games");

                    b.Navigation("RolePreferences");

                    b.Navigation("UserContestPackages");
                });

            modelBuilder.Entity("App.Domain.ContestRole", b =>
                {
                    b.Navigation("ContestUserRoles");
                });

            modelBuilder.Entity("App.Domain.ContestType", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("App.Domain.Court", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("App.Domain.Game", b =>
                {
                    b.Navigation("TeamGames");
                });

            modelBuilder.Entity("App.Domain.GameType", b =>
                {
                    b.Navigation("ContestGameTypes");

                    b.Navigation("Courts");

                    b.Navigation("Games");

                    b.Navigation("PackageGameTypeTimes");

                    b.Navigation("RolePreferences");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("App.Domain.Identity.AppUser", b =>
                {
                    b.Navigation("ContestTypes");

                    b.Navigation("ContestUserRoles");

                    b.Navigation("Courts");

                    b.Navigation("GameTypes");

                    b.Navigation("Levels");

                    b.Navigation("Locations");

                    b.Navigation("PackageGameTypeTimes");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RolePreferences");

                    b.Navigation("TimeOfDays");

                    b.Navigation("Times");

                    b.Navigation("UserContestPackages");
                });

            modelBuilder.Entity("App.Domain.Level", b =>
                {
                    b.Navigation("ContestLevels");

                    b.Navigation("Games");

                    b.Navigation("RolePreferences");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("App.Domain.Location", b =>
                {
                    b.Navigation("Contests");

                    b.Navigation("Courts");
                });

            modelBuilder.Entity("App.Domain.PackageGameTypeTime", b =>
                {
                    b.Navigation("ContestPackages");

                    b.Navigation("UserContestPackages");
                });

            modelBuilder.Entity("App.Domain.Team", b =>
                {
                    b.Navigation("TeamGames");

                    b.Navigation("TimeTeams");

                    b.Navigation("UserContestPackages");
                });

            modelBuilder.Entity("App.Domain.Time", b =>
                {
                    b.Navigation("ContestTimes");
                });

            modelBuilder.Entity("App.Domain.TimeOfDay", b =>
                {
                    b.Navigation("ContestTimeOfDays");

                    b.Navigation("TimeTeams");

                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
